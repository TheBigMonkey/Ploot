//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/SceneInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SceneInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SceneInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SceneInputs"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""5b828db1-f129-4892-98ad-f25a7e3f5536"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""69f70be9-b12c-4b71-9aa4-bf47beedacfd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""aac61c78-df31-4572-8cbb-a28b258b4562"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""a08ce624-ad2d-40bb-96b8-55a2077ea2ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookBehind"",
                    ""type"": ""Button"",
                    ""id"": ""649dde8d-6062-4e1e-a05e-7700117bdd9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Plant"",
                    ""type"": ""Button"",
                    ""id"": ""2ad075f0-603b-406c-bfb8-491ee7599fdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9daed1d4-9b07-4fef-8195-670dd81b48d0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a6d2456c-2ea6-4050-b6ee-b61a92b07b41"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7af3a81a-29ce-4a0d-a671-aee845c2bc97"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""34a1fbc7-76fc-43c4-870e-7f4ce9af97b1"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""43758a79-2614-4fc0-84ab-2f2010dbc35a"",
                    ""path"": ""<Keyboard>/#(√Å)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f35feb02-1f2c-4713-b92f-8c933c7d8952"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""3d7f5061-969b-4657-be1a-705b4d2deafe"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""41a20260-a184-4c8c-9ac9-bbf2b7354e1b"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a8ccd683-ae51-4c8a-a795-5c7eff63dee9"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2488a971-0868-425f-8b0f-e45e21c43f9c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookBehind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b00b656d-3c14-4396-8908-334b6374fa1a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plant"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Walk = m_Gameplay.FindAction("Walk", throwIfNotFound: true);
        m_Gameplay_RotateUpDown = m_Gameplay.FindAction("RotateUpDown", throwIfNotFound: true);
        m_Gameplay_Shoot = m_Gameplay.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplay_LookBehind = m_Gameplay.FindAction("LookBehind", throwIfNotFound: true);
        m_Gameplay_Plant = m_Gameplay.FindAction("Plant", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Walk;
    private readonly InputAction m_Gameplay_RotateUpDown;
    private readonly InputAction m_Gameplay_Shoot;
    private readonly InputAction m_Gameplay_LookBehind;
    private readonly InputAction m_Gameplay_Plant;
    public struct GameplayActions
    {
        private @SceneInputs m_Wrapper;
        public GameplayActions(@SceneInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Gameplay_Walk;
        public InputAction @RotateUpDown => m_Wrapper.m_Gameplay_RotateUpDown;
        public InputAction @Shoot => m_Wrapper.m_Gameplay_Shoot;
        public InputAction @LookBehind => m_Wrapper.m_Gameplay_LookBehind;
        public InputAction @Plant => m_Wrapper.m_Gameplay_Plant;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnWalk;
                @RotateUpDown.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateUpDown;
                @RotateUpDown.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateUpDown;
                @RotateUpDown.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateUpDown;
                @Shoot.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @LookBehind.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLookBehind;
                @LookBehind.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLookBehind;
                @LookBehind.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLookBehind;
                @Plant.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlant;
                @Plant.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlant;
                @Plant.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlant;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @RotateUpDown.started += instance.OnRotateUpDown;
                @RotateUpDown.performed += instance.OnRotateUpDown;
                @RotateUpDown.canceled += instance.OnRotateUpDown;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @LookBehind.started += instance.OnLookBehind;
                @LookBehind.performed += instance.OnLookBehind;
                @LookBehind.canceled += instance.OnLookBehind;
                @Plant.started += instance.OnPlant;
                @Plant.performed += instance.OnPlant;
                @Plant.canceled += instance.OnPlant;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnRotateUpDown(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnLookBehind(InputAction.CallbackContext context);
        void OnPlant(InputAction.CallbackContext context);
    }
}
